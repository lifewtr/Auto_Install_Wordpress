---
Description: CloudFormation install wordpress
Parameters: 
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair

Resources:
# creating the vpc.   
  VPC:
    Type: AWS::EC2::VPC 
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: "Name"
          Value: "CloudFormationVPC"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
# create an internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: "Name"
          Value: "CloudFormatioInternetGateway"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
# create a public subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet 
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: "us-west-2c"
      Tags:
        - Key: "Name"
          Value: "CloudFormationPublicSubnet"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
# create a public subnet
  PublicSubnet2:
    Type: AWS::EC2::Subnet 
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.1.30.0/24
      AvailabilityZone: "us-west-2b"
      Tags:
        - Key: "Name"
          Value: "CloudFormationPublicSubnet2"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
# create a private subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet 
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: "us-west-2c"
      Tags:
        - Key: "Name"
          Value: "CloudFormationPrivateSubnet"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
# create a private subnet
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.1.40.0/24
      AvailabilityZone: "us-west-2b"
      Tags:
        - Key: "Name"
          Value: "CloudFormationPrivateSubnet2"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
# create public route table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable 
    Properties:
      VpcId: !Ref VPC 
      Tags:
        - Key: "Name"
          Value: "CloudFormationPublicRouteTable"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
  PublicRoute:
    Type: AWS::EC2::Route
    # will not start unless AttachGateway finishes
    DependsOn: AttachGateway
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      # the traffic for local locations are default in routing
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # PublicRoute2: 
  #   Type: AWS::EC2::Route 
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NATGateway
# create a private route table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "CloudFormationPrivateRouteTable"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
  PrivateRoute: 
    Type: AWS::EC2::Route 
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
# create a NAT Gateway
  NATGateway:
    Type: AWS::EC2::NatGateway 
    Properties: 
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: "Name"
          Value: "CloudFormationNATGateway"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
  ElasticIPAddress:
    Type: AWS::EC2::EIP 
    Properties: 
      Domain: VPC
## Attaching the public submets to the public route tables,
## and attach the private subnet to private route tables  
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties: 
      SubnetId: !Ref PublicSubnet 
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties: 
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable 
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable 
# create a security Group
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable tcp access on ports 80 and 22"
      GroupName: MySecurityGroup
      VpcId: 
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 184.185.72.92/32
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 184.185.72.92/32
      Tags:
        - Key: "Name"
          Value: "CloudFormationSG"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
# create an elastic ip
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
      InstanceId: !Ref WebServer
# create an RDS instance
  rdsDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      DBName: myTestRDS
      DBInstanceClass: db.t2.micro
      DBSubnetGroupName: !Ref rdsDBSubnetGroup
      Engine: mySQL
      EngineVersion: "5.7.22"
      AllocatedStorage: "100"
      MasterUserPassword: "password"
      MasterUsername: "userChenTest"
      MultiAZ: false
      VPCSecurityGroups:
        - !Ref WebSecurityGroup
      Tags:
        - Key: "Name"
          Value: "RDSInstance"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
# create a DB subnet group
  rdsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB subnet group
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref PrivateSubnet2
      Tags:
        - Key: "Name"
          Value: "RDSSubnetGroup"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
# create an EC2 instance 
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: "Name"
          Value: "CloudFormationServer"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
      # us-east-1 ImageId: ami-0cc96feef8c6bbff3
      ImageId: ami-07669fc90e6e6cc47
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      SecurityGroupIds:
        - Ref: WebSecurityGroup
      SubnetId: !Ref PublicSubnet2
####################################################################
      UserData: 
        Fn::Base64:
          !Sub |
              #!/bin/bash -ex
              HOMEDIR=/home/ec2-user;
              cd ~;
              echo 'testInput' > ~/textfile;
              yum update -y;
              yum install git -y;
              git clone git://github.com/chef/chef-repo.git;
              mkdir -p ~/chef-repo/.chef;
              wget https://packages.chef.io/files/stable/chefdk/4.0.60/el/7/chefdk-4.0.60-1.el7.x86_64.rpm
              rpm -Uvh chefdk-4.0.60-1.el7.x86_64.rpm
              chef verify -yes 
              git clone https://github.com/lifewtr/chefstarter.git
              cd chefstarter 
              unzip chef-starter.zip
              cd ~/chef-repo/.chef;
              git clone https://github.com/lifewtr/testserverkey
              cd testserverkey 
              cp chenxu.pem ~/chef-repo/.chef 
              cd ../cookbooks
              knife download /cookbooks 
              cd wordpress
              




              


####################################################################
# create an EC2 instance 
  WebServer2:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: "Name"
          Value: "CloudFormationServer"
        - Key: "Owner"
          Value: "chen.xu"
        - Key: "ExpirationDate"
          Value: "2019-06-21"
        - Key: "Project"
          Value: "training"
        - Key: "Environment"
          Value: "Development"
      # us-east-1 ImageId: ami-0cc96feef8c6bbff3
      ImageId: ami-07669fc90e6e6cc47
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      SecurityGroupIds:
        - Ref: WebSecurityGroup
      SubnetId: !Ref PublicSubnet

